assert_spec linux

set test_write [have_spec linux]

#
# Check used commands
#
set dd [installed_command dd]

#
# Query writeable for policy
#
proc writeable { } {

	global test_write

	if {$test_write} {
		return yes
	} else {
		return no
	}
}

#
# Build
#
set build_components {
	core init timer
	server/lx_fs
	server/vfs_block
	app/block_tester
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components


#
# Create raw image
#
catch { exec $dd if=/dev/zero of=bin/vfs_block.file bs=1M count=0 seek=256 }

create_boot_directory

#
# Generate config
#
append config {
<config verbose="no">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append config {
	<start name="lx_fs" ld="no">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<policy label_prefix="vfs_block" root="/" writeable="} [writeable] {"/>
		</config>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="vfs_block">
		<resource name="RAM" quantum="5M"/>
		<provides> <service name="Block"/> </provides>
		<config verbose="no" file="/vfs_block.file" block_size="512"
		        writeable="} [writeable] {">
			<vfs>
				<fs buffer_size="4M" label="backend"/>
			</vfs>
			<policy label_prefix="block_tester" writeable="} [writeable] {"/>
		</config>
		<route>
			<service name="File_system"> <child name="lx_fs"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="block_tester" caps="200">
		<resource name="RAM" quantum="64M"/>
		<config verbose="no" report="no" log="yes" stop_on_error="no">
			<tests>
				<sequential length="32M" size="4K"   batch="128"/>
				<sequential length="32M" size="8K"   batch="128"/>
				<random     length="32M" size="512K" seed="0xc0ffee"/>
				<ping_pong  length="32M" size="16K"/>}

append_if $test_write config {
				<sequential length="256M" size="64K" batch="128" write="yes"/>
				<replay verbose="no" batch="128">
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="0" count="1"/>
					<request type="read" lba="2048" count="1016"/>
					<request type="read" lba="4096" count="1"/>
					<request type="write" lba="0" count="1"/>
					<request type="read" lba="1024" count="2048"/>
					<request type="write" lba="4096" count="2048"/>
					<request type="write" lba="0" count="1"/>
					<request type="write" lba="2048" count="1"/>
					<request type="write" lba="5696" count="1"/>
					<request type="write" lba="5696" count="1"/>
					<request type="sync" lba="0" count="1"/>
				</replay>}
append config {
			</tests>
		</config>
		<route>
			<service name="Block"><child name="vfs_block"/></service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>}

install_config $config

#
# Boot modules
#

set boot_modules {
	core init timer lx_fs vfs_block
	vfs.lib.so
	ld.lib.so block_tester
	vfs_block.file
}

append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until {.*child "block_tester" exited with exit value 0.*\n} 300

exec rm -f bin/nvme.raw
