#
# Build
#

set on_hardware [expr ![have_include power_on/qemu]]

set build_components {
	core init timer
	drivers/nic
	server/nic_router
	server/nic_bridge
	app/ping
}

proc gpio_drv { } { if {[have_spec rpi] && [have_spec hw]}  { return hw_gpio_drv }
                    if {[have_spec rpi] && [have_spec foc]} { return foc_gpio_drv }
                    return gpio_drv }


lappend_if [have_spec gpio] build_components drivers/gpio

if {[have_spec foc] || [have_spec odroid_xu] || [have_spec linux] ||
    [expr [have_spec imx53] && [have_spec trustzone]]} {
	puts "Run script is not supported on this platform."
	exit 0
}

proc good_dst_ip { } {
	if {![have_include power_on/qemu]} {
		return "10.0.0.2"
	} else {
		return "10.0.2.2"
	}
}
proc bad_dst_port { } { return "12345" }
proc bad_dst_ip   { } { return "10.0.1.2" }


source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>}

append_platform_drv_config

append_if [have_spec gpio] config "
	<start name=\"[gpio_drv]\" caps=\"150\">
		<resource name=\"RAM\" quantum=\"4M\"/>
		<provides><service name=\"Gpio\"/></provides>
		<config/>
	</start>"

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="nic_drv" caps="150">
		<binary name="} [nic_drv_binary] {"/>
		<resource name="RAM" quantum="20M"/>
		<provides><service name="Nic"/></provides>
		} [nic_drv_config] {
	</start>

	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="Nic"/></provides>
		<config verbose="no"
		        verbose_packets="no"
		        dhcp_discover_timeout_sec="1"
		        icmp_idle_timeout_sec="6">

			<policy label="ping_11 -> "   domain="ping_1" first_mac="02:02:02:02:02:34"/>
			<policy label="ping_12 -> "   domain="ping_1" first_mac="02:02:02:02:02:56"/>
			<policy label_prefix="ping_2" domain="ping_2"/>
			<uplink                       domain="uplink"/>

			<domain name="uplink">
				<nat domain="ping_1" icmp-ids="100"/>
				<nat domain="ping_2" icmp-ids="100" udp-ports="100"/>
			</domain>

			<domain name="ping_2" interface="10.0.4.1/24">
				<icmp dst="} [good_dst_ip] {/24" domain="uplink"/>
				<udp dst="} [good_dst_ip] {/24">
					<permit port="} [bad_dst_port] {" domain="uplink"/>
				</udp>
			</domain>

			<domain name="ping_1" interface="10.0.3.1/24">
				<icmp dst="} [good_dst_ip] {/24" domain="uplink"/>
			</domain>

		</config>
		<route>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_2_nic_router" caps="200">
		<binary name="nic_router"/>
		<resource name="RAM" quantum="10M"/>
		<provides><service name="Nic"/></provides>
		<config verbose="no"
		        verbose_packets="no"
		        icmp_idle_timeout_sec="10">

			<policy label_prefix="ping_2" domain="ping_2"/>
			<uplink                       domain="uplink"/>

			<domain name="uplink" interface="10.0.4.2/24" gateway="10.0.4.1">
				<nat domain="ping_2" icmp-ids="100" udp-ports="100"/>
			</domain>

			<domain name="ping_2" interface="10.0.5.1/24">
				<dhcp-server ip_first="10.0.5.100"
				             ip_last="10.0.5.200"/>

				<icmp dst="} [bad_dst_ip] {/24" domain="uplink"/>
				<icmp dst="} [good_dst_ip] {/24" domain="uplink"/>
				<udp dst="} [good_dst_ip] {/24">
					<permit port="} [bad_dst_port] {" domain="uplink"/>
				</udp>
			</domain>

		</config>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_11">
		<binary name="ping"/>
		<resource name="RAM" quantum="8M"/>
		<config interface="10.0.3.2/24"
		        gateway="10.0.3.1"
		        dst_ip="} [good_dst_ip] {"
		        period_sec="1"
		        verbose="no"/>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_12">
		<binary name="ping"/>
		<resource name="RAM" quantum="8M"/>
		<config interface="10.0.3.3/24"
		        gateway="10.0.3.1"
		        dst_ip="} [good_dst_ip] {"
		        period_sec="1"
		        verbose="no"/>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_2_nic_bridge" caps="200">
		<binary name="nic_bridge"/>
		<resource name="RAM" quantum="10M"/>
		<provides><service name="Nic"/></provides>
		<config mac="12:12:12:12:12:00">
			<policy label_prefix="ping_21"/>
			<policy label_prefix="ping_23"/>
		</config>
		<route>
		<service name="Nic"> <child name="ping_2_nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_21">
		<binary name="ping"/>
		<resource name="RAM" quantum="8M"/>
		<config dst_ip="} [good_dst_ip] {"
		        period_sec="1"
		        verbose="no"/>
		<route>
			<service name="Nic"> <child name="ping_2_nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="ping_22">
		<binary name="ping"/>
		<resource name="RAM" quantum="8M"/>
		<config interface="10.0.5.3/24"
		        gateway="10.0.5.1"
		        dst_ip="} [bad_dst_ip] {"
		        period_sec="1"
		        verbose="no"/>
		<route>
			<service name="Nic"> <child name="ping_2_nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>}

append_if $on_hardware config {
	<start name="ping_23">
		<binary name="ping"/>
		<resource name="RAM" quantum="8M"/>
		<config period_sec="1"
		        verbose="no"
		        count="1"
		        protocol="udp"
		        dst_ip="} [good_dst_ip] {"
		        dst_port="} [bad_dst_port] {"/>
		<route>
			<service name="Nic"> <child name="ping_2_nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>}

append config {
</config>}

install_config $config

#
# Boot modules
#

# generic modules
append boot_modules {
	core init
	timer
	} [nic_drv_binary] {
	ping
	ld.lib.so
	nic_router
	nic_bridge
}

# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl
lappend_if [have_spec gpio]  boot_modules [gpio_drv]

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -nographic "

proc qemu_nic_model {} {
	if [have_spec x86]         { return e1000 }
	if [have_spec lan9118]     { return lan9118 }
	if [have_spec zynq]        { return cadence_gem }
	return nic_model_missing
}

append qemu_args " -netdev user,id=net0 "
append qemu_args " -net nic,model=[qemu_nic_model],netdev=net0 "

set done_string ""
append done_string ".*?ping_12] NIC connection: MAC 02:02:02:02:02:56.*?\n"

for {set i 0} {$i < 3} {incr i 1} {
	append done_string ".*child \"ping...\" exited with exit value 0.*\n"
}
append done_string ".*ping_22\] From 10.0.4.1 icmp_seq=.* Destination Unreachable.*\n"

append_if $on_hardware done_string ".*ping_23\] From [good_dst_ip] Destination Unreachable.*\n"

run_genode_until $done_string 30
