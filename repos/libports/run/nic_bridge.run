#
# Build
#

if {![have_include power_on/qemu]} {
	puts "Run script is only supported on Qemu"
	exit 0
}

set build_components {
	core init timer
	drivers/nic
	server/nic_bridge
	test/lwip/http_srv
	test/lwip/http_clnt
	lib/vfs/lwip
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>}

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="nic_drv">
		<binary name="} [nic_drv_binary] {"/>
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>

	<start name="nic_bridge" caps="200">
		<resource name="RAM" quantum="24M"/>
		<provides><service name="Nic"/></provides>
		<config verbose="yes" mac="02:02:02:02:42:00">
			<policy label_prefix="client_1"/>
			<policy label_prefix="server_1" ip_addr="10.0.2.55"/>
			<policy label_prefix="server_2" ip_addr="10.0.2.56" mac="02:02:02:02:23:00"/>
			<policy label_prefix="client_2"                     mac="02:02:02:02:79:00"/>
		</config>
		<route>
			<service name="Nic"> <child name="nic_drv"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="server_1">
		<binary name="test-lwip_httpsrv"/>
		<resource name="RAM" quantum="32M"/>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config port="80">
			<vfs>
				<dir name="socket">
					<lwip ip_addr="10.0.2.55" netmask="255.255.255.0" gateway="10.0.2.1"/>
				</dir>
				<dir name="dev"> <log/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket"/>
		</config>
	</start>

	<start name="server_2">
		<binary name="test-lwip_httpsrv"/>
		<resource name="RAM" quantum="32M"/>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config port="80">
			<vfs>
				<dir name="socket">
					<lwip ip_addr="10.0.2.56" netmask="255.255.255.0" gateway="10.0.2.1"/>
				</dir>
				<dir name="dev"> <log/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket"/>
		</config>
	</start>

	<start name="client_1" caps="120">
		<binary name="test-http_clnt"/>
		<resource name="RAM" quantum="32M"/>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config server_ip="10.0.2.55" server_port="80">
			<vfs>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
				<dir name="dev">    <log/>             </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket"/>
		</config>
	</start>

	<start name="client_2" caps="120">
		<binary name="test-http_clnt"/>
		<resource name="RAM" quantum="32M"/>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config server_ip="10.0.2.56" server_port="80">
			<vfs>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
				<dir name="dev">    <log/>             </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket"/>
		</config>
	</start>

	<start name="client_3" caps="120">
		<binary name="test-http_clnt"/>
		<resource name="RAM" quantum="32M"/>
		<route>
			<service name="Nic"> <child name="nic_bridge"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config server_ip="10.0.2.56" server_port="80">
			<vfs>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
				<dir name="dev">    <log/>             </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" socket="/socket"/>
		</config>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
append boot_modules {
	core init
	timer } [nic_drv_binary] {
	nic_bridge
	ld.lib.so
	libc.lib.so vfs.lib.so
	test-http_clnt
	test-lwip_httpsrv
	vfs_lwip.lib.so
}


# platform-specific modules
lappend_if [have_spec       linux] boot_modules fb_sdl

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "  -nographic "

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user "

append done_string {.*?\[init -> client_3] .\[31mError: Nic-session creation failed}
append done_string {.*?\[client_1 -> lwip] rcv .\[32mETH.\[0m 02:02:02:02:42:0.}
append done_string {.*?\[client_2 -> lwip] rcv .\[32mETH.\[0m 02:02:02:02:79:00}
append done_string {.*?\[server_1 -> lwip] rcv .\[32mETH.\[0m 02:02:02:02:42:0.}
append done_string {.*?\[server_2 -> lwip] rcv .\[32mETH.\[0m 02:02:02:02:23:00}
append done_string {.*?"client_." exited with exit value 0}
append done_string {.*?"client_." exited with exit value 0}
append done_string {.*?\n}

run_genode_until $done_string 40
