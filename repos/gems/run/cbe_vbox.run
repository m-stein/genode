if {[have_include "power_on/qemu"]} {
	exit 1
}

set use_net 1
set use_ps2 [have_spec ps2]
set use_usb 1
set use_serial 1
set use_top 0

set use_cbe 0

set use_vbox5_nova 0

set build_components {
	drivers/framebuffer
	drivers/usb
	drivers/usb_block
	server/report_rom
	lib/vfs/cbe
}

append build_components virtualbox5

set virtualbox_binary "virtualbox5"

if {$use_vbox5_nova} {
	set virtualbox_binary "virtualbox5-nova"
}

create_boot_directory

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/src/init \
                  [depot_user]/src/nitpicker

source ${genode_dir}/repos/base/run/platform_drv.inc
# override defaults of platform_drv.inc
proc platform_drv_priority {} { return { priority="-1"} }

lappend_if [expr $use_top]    build_components app/top
lappend_if [expr $use_ps2]    build_components drivers/input
lappend_if [expr $use_usb]    build_components drivers/usb
lappend_if [expr $use_serial] build_components server/log_terminal
lappend_if [have_spec x86]    build_components drivers/rtc

lappend_if [expr $use_net]    build_components drivers/nic

append_platform_drv_build_components

build $build_components

set config {
<config prio_levels="4">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="VM"/>}

append_if [expr $use_top] config {
		<service name="TRACE"/>}

append config {
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_if [expr $use_top] config {
	<start name="top">
		<resource name="RAM" quantum="2M"/>
		<config period_ms="15000"/>
	</start>}

append_platform_drv_config

append_if [expr $use_ps2] config {
	<start name="ps2_drv" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Input"/></provides>
	</start>}

append_if [expr $use_usb] config {
	<start name="usb_drv" priority="-1" caps="120">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/> <service name="Usb"/></provides>}

append_if [expr $use_usb] config {
		<config uhci="yes" ehci="yes" xhci="yes">
			<hid/>
			<raw>
				<report devices="yes"/>
				<!-- <default-policy vendor_id="0x1b1c" product_id="0x1a09"/> -->
				<default-policy bus="0x0002" dev="0x0002"/>
			</raw>
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="usb_block_drv">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="Block"/> </provides>
		<config report="yes" writeable="yes" verbose_block="yes"/>
		<route>
			<service name="Usb"> <child name="usb_drv"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv" priority="-1" caps="150">
		<binary name="vesa_fb_drv"/>
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>}
append_if [expr [have_spec framebuffer] && [have_include power_on/qemu]] config {
		<config width="1280" height="1024" depth="16" buffered="yes"/>}
append_if [expr [have_spec framebuffer] && [have_include power_on/qemu]] config {
		<config buffered="yes"/>}
append_if [have_spec framebuffer] config {
	</start>}

append_if [have_spec x86] config {
	<start name="rtc_drv" priority="-1">
		<resource name="RAM" quantum="1M"/>
		<provides>
			<service name="Rtc"/>
		</provides>
	</start>}

append_if [expr $use_net] config {
	<start name="nic_drv" priority="-1">
		<binary name="ipxe_nic_drv"/>
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>
}

append_if [expr $use_serial] config {
	<start name="log_terminal" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Terminal"/>
		</provides>
	</start>
}

append config {
	<start name="report_rom" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config>
			<policy label="pointer -> hover" report="nitpicker -> hover"/>
			<policy label="pointer -> xray"  report="nitpicker -> xray"/>
		</config>
	</start>

	<start name="nitpicker" priority="-1">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nitpicker"/></provides>
		<route>
			<service name="Framebuffer"> <child name="fb_drv" /> </service>
			<service name="Report"> <child name="report_rom" /> </service>
			<service name="Input"> <child name="ps2_drv"/> </service>}

append config {
			<any-service> <parent/> <any-child /> </any-service>
		</route>
		<config>
			<report focus="yes" hover="yes" xray="yes" />

			<domain name="pointer"  layer="1" content="client" label="no" origin="pointer" />
			<domain name=""         layer="2" content="client" focus="click" hover="always" />

			<policy label_prefix="pointer" domain="pointer"/>
			<default-policy domain=""/>
		</config>
	</start>

	<start name="pointer" priority="-1">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Report"/></provides>
		<config shapes="yes"/>
		<route>
			<service name="Nitpicker"> <child name="nitpicker"/>  </service>
			<service name="ROM" label="hover"> <child name="report_rom"/> </service>
			<service name="ROM" label="xray"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>}

append config {
	<start name="vbox1" priority="-2" caps="800">
		<binary name="} $virtualbox_binary {"/>
		<resource name="RAM" quantum="2536M"/>
		<config vbox_file="cbe_vbox.vbox" vm_name="TestVM">
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc"/>
			<vfs>
				<dir name="dev"> <log/> <rtc/>}

append_if [expr $use_serial] config {
				<terminal/>}

append_if [expr $use_cbe] config {
					<block name="block" block_buffer_count="1"/>
					<cbe name="cbe" show_progress="no" passphrase="All your base are belong to us" block="/dev/block"/>}

append_if [expr ! [expr $use_cbe]] config {
					<dir name="cbe">
						<dir name="current">
							<block name="data" block_buffer_count="1"/>
						</dir>
					</dir>}

append config {
				</dir>
				<rom name="cbe_vbox.vbox"/>
				<rom name="cbe_vbox.iso"/>
				<rom name="cbe_vbox.vmdk"/>
			</vfs>
		</config>
		<route>}

append config {
			<service name="Report" label="shape"> <child name="pointer" label="nit_fb1 -> shape"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="Framebuffer"> <child name="nit_fb1" /> </service>
			<service name="Block"> <child name="usb_block_drv" /> </service>
			<service name="Input"> <child name="nit_fb1" /> </service>
			<any-service> <parent /> <any-child /> </any-service>
		</route>
	</start>
</config>
}

install_config $config

set vbox_file "run/cbe_vbox.vbox"
set repo "[repository_contains $vbox_file]"
exec cp $repo/$vbox_file bin/.
exec cp $repo/run/cbe_vbox.vmdk bin/.

set boot_modules { cbe_vbox.iso cbe_vbox.vbox cbe_vbox.vmdk }

append boot_modules $virtualbox_binary

# platform-specific modules
lappend_if [expr         $use_usb] boot_modules usb_drv
lappend_if [expr         $use_ps2] boot_modules ps2_drv
lappend_if [have_spec framebuffer] boot_modules vesa_fb_drv
lappend_if [have_spec         x86] boot_modules rtc_drv
lappend_if [expr         $use_top] boot_modules top

append boot_modules {
	report_rom usb_block_drv
	spark.lib.so libsparkcrypto.lib.so vfs_cbe.lib.so
	libc.lib.so vfs.lib.so libm.lib.so libc_pipe.lib.so
	libiconv.lib.so stdcxx.lib.so
	qemu-usb.lib.so
}

append_if [expr $use_net]          boot_modules { ipxe_nic_drv }
append_if [expr $use_serial]       boot_modules { log_terminal }

append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until forever
