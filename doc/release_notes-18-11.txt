

              ===============================================
              Release notes for the Genode OS Framework 18.11
              ===============================================

                               Genode Labs



; intro
; @nfeske


Raising the bar of quality assurance
####################################

Automated test infrastructure hosted on top of Genode
=====================================================

; @m-stein

commit 146f45f3d4b9e97ff399b42a72f9114f9094a465
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Wed Oct 10 18:08:14 2018 +0200

    Archive recipes for autopilot tests

commit 2d041ac0fc9a465ecbb43d6f5b506c3a369e481b
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Oct 1 16:53:37 2018 +0200

    depot_autopilot: evaluate sets of test packages

commit 35fe4842b077d63e21c0f5339ce1e6e50b645d54
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Nov 19 14:04:55 2018 +0100

    depot_autopilot: show result statistic
    
    Print a line like "succeeded: 35 failed: 11 skipped: 2" below the list of test
    results. Adds further attributes to <previous-results> to communicate also the
    previous statistics.


New tooling for obtaining test-coverage metrics
===============================================

; @cproc

commit f723557dacbae6c7b003f5436e41c400d6bc46ae
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue Nov 6 19:46:50 2018 +0100

    mk: add 'COVERAGE' option
    
    'COVERAGE=yes' in 'target.mk' adds gcov-specific compiler flags and links the
    program with libgcov.
    
    Issue #3048

commit 081502ee983758cbb407e157b6d71c8af4a45edf
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Thu Nov 15 18:04:53 2018 +0100

    libports: add libgcov and gcov tool
    
    Issue #3048

commit 9dcdc76b8a152c2d3fb45589fdf1fb9ff9d499c8
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue Nov 20 14:29:59 2018 +0100

    depot.inc: 'append_src_and_api_depot_packages_to_tar' function
    
    This function adds the src and api depot packages for the given pkg or src
    packages to the given tar archive.
    
    Issue #3048

commit 22e071ab93e44e19c086252a4be341e24f3d96e3
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Tue Nov 20 14:30:49 2018 +0100

    depot_autopilot.run: integrate gcov tool
    
    Issue #3048

commit 06161ddc042ae087d8f10fe359e525eb8da78196
Author: Christian Prochaska <christian.prochaska@genode-labs.com>
Date:   Thu Nov 22 18:07:04 2018 +0100

    test-xml_generator: enable code coverage analysis
    
    Issue #3048


Static code analysis
====================

The static analyzer tool of https://clang-analyzer.llvm.org can
analyze source code in C and C++ projects to find bugs during
compile time.

With this tool enabled Genode users can check and ensure the quality of
Genode components. The tool can be invoked during make invocations and
during creation of Genode packages.

For the make invocation a STATIC_ANALYZE variable on the commandline will
cause the tool to run next to the actual build step.

! STATIC_ANALYZE=1 make -C build/x86_64 KERNEL=... run/...

For the creation of Genode packages the wrapper tool static_analyze is
required, which must be invoked before any tool/depot/* tools to take effect,
e.g.:

! tool/depot/static_analyze tool/depot/create <user>/pkg/...

The results of the static analyzer tool is generated in form of html pages and
can be checked afterwards. The following example output showcases the output
of the static analyzer tool:

!
! make: Entering directory '../genode/build/x86_64'
! checking library dependencies...
! scan-build: Using '/usr/lib/llvm-6.0/bin/clang' for static analysis
! ...
!
! LINK     init
! scan-build: 0 bugs found.
! scan-build: The analyzer encountered problems on some source files.
! scan-build: Preprocessed versions of these sources were deposited in '/tmp/scan-build-2018-11-28-111203-20081-1/failures'.


Genode as target for Mirage-OS unikernels
#########################################

; @ehmry

commit bc539ce892ad3446570f6a4dcb0f91e574987eed
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Wed Nov 7 15:16:30 2018 +0100

    Native Solo5 bindings
    
    A shared library implementation of the unikernel middleware.
    
    https://github.com/Solo5/solo5
    
    Fix #2945


Base framework and OS-level infrastructure
##########################################

Component health monitoring
===========================

Scenarios where components are known to sometimes fail call for a mechanism
that continuously checks the health of components and reports anomalies. To
accommodate such use cases, we introduced a low-level health-monitoring
mechanism into the foundation of the framework and made this mechanism
available via init's configuration concept.

At the lowest level, the parent interface received two new RPC functions. The
'heartbeat_sigh' function allows a child to register a signal handler for
heartbeat signals. The 'heartbeat_response' allows a child to confirm its
health to the parent. With this basic interface, a parent becomes able to
periodically ask for a life sign from each of its children.

[image heartbeat]

Each component installs a heartbeat signal handler during its initialization.
This happens under the hood and is thereby transparent to application code.
The default heartbeat handler invokes the 'heartbeat_response' function at
the parent interface and thereby confirms that the component is still able to
respond to external events.

Based on this low-level mechanism, we enhanced the init component with the
ability to monitor components hosted on top of init. A global (for this init
instance) heartbeat rate can be configured via a '<heartbeat rate_ms="1000"/>'
node at the top level of init's configuration. If configured, init opens a
dedicated timer session for performing health checks periodically. Each
component that hosts a '<heartbeat>' node inside its '<start>' node is
monitored. In each period, init requests heartbeat responses from all
monitored children and maintains a count of outstanding heartbeats for each
component. The counter is incremented in each period and reset whenever the
child responds to init's heartbeat request. Whenever the number of outstanding
heartbeats of a child becomes higher than 1, the child may be in trouble. Init
reports this information in its state reports via the new attribute
'skipped_heartbeats="N"' where N denotes the number of periods since the child
became unresponsive.

Of course, the mechanism won't deliver 100% accuracy. There may be situations
like long-running calculations where long times of unresponsiveness are
expected from a healthy component. Vice versa, in a multi-threaded
application, the crash of a secondary thread may go undetected if the primary
(checked) thread stays responsive. However, in the majority of cases where a
component crashes (page fault, stack overflow), gets stuck in a busy loop,
produces a deadlock, or throws an unhandled exception (abort), the mechanism
nicely reflects the troublesome situation to the outside.


Enhanced window-management flexibility
======================================

Genode's
[https://genode.org/documentation/release-notes/14.08#New_GUI_architecture - custom GUI architecture]
consists of multiple components with strictly distinguished roles. The central
broker between those components is a low-complexity window-manager (wm)
component, which is complemented by a so-called decorator defines how windows
look, and a layouter defines how they behave. Since the layouter and decorator
are sandboxed components without access to the application window's content
nor the user input into the applications, those components are not critical
for the security of GUI applications.


New window layouter
~~~~~~~~~~~~~~~~~~~

The window layouter complements the window manager with the policy of how
windows are positioned on screen and how windows behave when the user
interacts with window elements like the maximize button or the window title.
The current release replaces the former "floating_window_layouter" with a new
"window_layouter" component that supports the subdivision of screen space into
columns and rows, the concept of layers, and the principle ability to store
window layout information across reboots.


Layout rules
------------

The window layouter positions windows according to rules defined by the
component's configuration. The rules consist of two parts, the definition
of the screen's layout and the assignment of client windows to the defined
parts of the screen's layout.

! <config>
!   <rules>
!     <screen>
!       ...definition of screen layout...
!     </screen>
!     <assign label_prefix="..." target="..."/>
!     ,,,
!   </rules>
!   ...
! </config>

The '<screen>' node can host any number of '<column>' nodes, which partition
the screen horizontally into columns. By default, each column has the same
size. By specifying an optional 'weight' attribute, column sizes can be
weighted relative to one another. The default weight is '1'. Alternatively,
the 'width' of a column can be explicitly specified in pixels.
Each column can host any number of '<row>' nodes, which subdivide the column
vertically. Analogously to columns, rows can be dimensioned via an optional
'weight' attribute or an explicit 'height' in pixels. A '<row>' can, in turn,
contain '<column>' nodes, thereby further subdividing the screen.
Each '<column>' or '<row>' can be used as window-placement target when
equipped with a 'name' attribute. Each name must occur only once within
the '<screen>'. In the following, a named column or row is referred to as
_target_. Each target can host an optional 'layer' attribute. If not
specified, the layer 9999 is assumed. A target with a lower layer overlaps
targets with higher layers.

The assignment of windows to targets is defined via '<assign>' nodes. Each
'<assign>' node must be equipped with a 'label', 'label_prefix', or
'label_suffix' attribute, which is used to match window labels. For a given
window, the first matching '<assign>' node takes effect.

Each '<assign>' node must have a 'target' attribute that refers to the name
of a column or row. By default, the window is sized to fit the target area.
However, it is possible to position the window relative to the target area by
specifying the 'xpos', 'ypos', 'width', and 'height' attributes together with
the 'maximized="no"' attribute.

If multiple windows are assigned to the same target area, the order of their
'<assign>' rules defines their stacking order. The window with earliest
'<assign>' rule is displayed in front.


Dynamic layouts
---------------

The window layouter is able to respond to rule changes at runtime.

By specifying the '<config>' attribute 'rules="rom"', the window layouter
tries to obtain the layout rules from a distinct ROM module. Should the ROM
module not contain valid rules, the '<rules>' sub node of the '<config>' comes
into effect.

Any window-layout change such as the movement of a floating window is
realized as a change of the window-layout rules. To support interactive
adjustments of the window layout, the layouter responds to certain user
interactions by generating new rules by itself in the form of a "rules"
report. The generation of such rules can be enabled via the '<report>' sub
node of the configuration:

! <config>
!   <report rules="yes"/>
!   ...
! </config>

By feeding back the rules generated by the window layouter into the window
layouter itself via a 'report_rom' service, the window layout becomes
adjustable interactively. As the rules entail the complete state of the
present window layout, it is possible to save/restore the layout state.


Dynamic rule-generation mechanism
---------------------------------

Whenever a new window appears that solely matches a wildcard '<assign>' rule
(one that uses a 'label_prefix' or 'label_suffix'), the layouter generates a
new '<assign>' rule with the window's label as 'label' attribute. The
explicitly labeled '<assign>' rules appear before any wildcard '<assign>'
rules.

If the user brings a window to front, the window layouter will change the order
of the explicit '<assign>' rules such that the window's '<assign>' rule comes
first. When moving or resizing a window, the 'xpos', 'ypos', 'width', and
'height' attribute of the window's assign rule are updated. When maximizing
or unmaximizing a window, the 'maximized' attribute of its '<assign>' rule is
toggled.


Modularized window system in Sculpt OS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sculpt OS used to come with a package called "wm", which comprised a
ready-to-use composition of the window-system components, including the
layouter, a decorator, and the configuration of these components.
Even though, this package was convenient for start, we desire more
flexibility. For example, a user may with to replace the decorator
at runtime or tweak the configuration of the individual components at
runtime. For this reason, we split up the wm package. For the convenient
use in run scripts, we preserved the former wm package as "motif_wm".

With the move of the window layouter and window decorators into
dedicated packages, those components can now be combined with the "wm"
server at runtime and restarted/reconfigured/swapped-out independently.
To use the window manager in Sculpt, one must start the "wm",
"window_layouter", and one of the "motif_decorator" or "themed_decorator"
subsystems. It is possible to replace one decorator by the other at
runtime.

The window layouter package requires a so-called "recall_fs" component,
which is a file system used for *remembering the window layouter's state*.
Sculpt comes with ready-to-use "recall_fs" launcher, which hands out
the directory _/recall_ of the used file system. When the window layouter
is started, a file _/recall/window_layouter/rules_ reflects the current
state of the layouter. It serves two purposes. First, it preserves
the window layout across reboots. Second, it can be edited by the user
or other components. Thereby, the layout policy can be tweaked without
limits, and the rules can simply be swapped out by mere file operations.


Network-stack improvements
==========================

; @ehmry

commit fcbe060096736a172012ab213b5bcd482f8b3e9d
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Fri Aug 31 11:03:13 2018 +0200

    Remove legacy lwIP plugins
    
    Now that the lwIP VFS plugin has become a first class IP stack it is
    time to remove the lwIP 1.x library and the associated libc plugins.
    
    Fix #2958

commit 0bd719a00bf9a68558b89dfac7def68e63beeb51
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Mon Nov 12 12:49:21 2018 +0100

    Update lwIP to 2.1.1
    
    Fix #3035

commit 81a4d1c585e998d3faaf3039168ac5fa71967d76
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Fri Nov 23 15:56:51 2018 +0100

    Update lwIP to 2.1.2
    
    Fix #3035


Java language runtime
=====================


Ada language runtime
====================

Genode's support for the Ada programming language is maintained by
[https://componolit.com - Componolit]. With the current release, the
runtime-specific code moved to a
[https://github.com/Componolit/ada-runtime - distinct repository], which
is integrated with Genode as a port. It can be installed by executing the
following command from the base of Genode's source tree:

! ./tool/ports/prepare_port ada-runtime


C language runtime
==================

; @ehmry

commit 415511d0743e1411643af88a86785db58523ac45
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Wed Nov 21 17:17:25 2018 +0100

    Merge pthread into libc library
    
    The pthread API is considered a standard feature of libc so better to
    simply merge it with the libc. Pthreads are in fact already a part of
    the libc in the form of weak symbols. This merger is also a prerequisite
    for better integrating pthreads with the libc I/O task.
    
    Fix #3054


Improved performance of Zynq network driver
===========================================

; @nfeske

commit 2e4f828ba87efa13a999818f74fd29e155f4a56b
Author: Johannes Schlatow <schlatow@ida.ing.tu-bs.de>
Date:   Sat Sep 29 12:31:49 2018 +0200

    zynq: zero-copy implementation of nic_drv
    
    - Packet stream buffers are directly passed to DMA.
    - Also enables pause frames and checksum offloading.
    
    Issue #3053


Base API changes
================

The framework's base API received two minor improvements.

First, the _util/reconstructible.h_ utility has a new method called
'conditional', which simplifies the typical use case for 'Constructible'
objects where the constructed/destructed state depends on a configuration
parameter. The method alleviates the need to re-implement the logic manually.

Second, when creating a secondary entrypoint, the CPU affinity of the
entrypoint is now specified as an argument.


Libraries and applications
##########################

Initial version of the Genode SDK
=================================

; @ehmry

commit f7fb748510227259865fd3f78ae673ac6dce7a6b
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Sun Aug 26 22:11:04 2018 +0200

    Genode SDK
    
    Makefile for generating a Genode SDK.
    
    Fix #2948


SSH terminal server
===================

Up to now we mostly focused on covering the direct interaction of a user with
the system and besides a minimal TCP terminal there was no component to
accommodate remote access. Instead of extending this component to add vital
features like TLS or user authentication, we turned to using an existing
protocol. For this use-case the SSH protocol is still a popular choice as
clients and server programs are virtually available for all OSes.

So with this release we introduce a component that makes Genode's Terminal
session accessible via SSH. It is based on the server implemetation of libssh,
which was updated to version 0.8.4. On the Genode side of things it acts as a
Terminal session server to which Terminal clients can connect. From the outside
users may access a specific Terminal session by logging in via SSH given they
provide the proper login credentials. For now it only implements the SSH
channel 'shell' and 'term' requests, i.e., it can be used for interactive
sessions but not for scp/rsync or other operations that rely on the 'exec'
request. Since the component merely makes Terminal sessions available, the
SSH connection needs to be forcefully closed by issuing the well-known '~.'
sequence rather than using '^D' (EOF) as the underlying Terminal session might
not be able to deal with that.

The following exemplary snippet shows how the component can by configured:

!<config port="2022" ed25519_key="/etc/ed25519_host_key
!        allow_password="yes" allow_publickey="yes"/>
!
!  <policy label="noux-system" user="root" password="toor"/>
!  <policy label="noux-user"   user="user" pub_key="/etc/user.pub"/>
!
!  <vfs>
!    <dir name="dev">
!      <log/> <rtc/> <jitterentropy name="random"/>
!    </dir>
!    <dir name="socket"> <lxip dhcp="yes"/> </dir>
!    <dir name="etc"> <fs/> </dir>
!  </vfs>
!  <libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" socket="/socket"/>
!</config>

The component is configured to listen on port '2022' for incoming SSH
connections and allows for logging in by using either a password or public-key.
The '<policy>' configuration is used to link the Terminal session to the SSH
login. In this case, the Terminal session of the client with the label
'noux-system' may be accessed via the 'root' login. The '<vfs>' configures the
file system of the component. Besides access to the needed services, like the
real-time clock, random device and the TCP/IP stack, it use a file system session
mounted at '/etc' for housing the files needed by the component. In particular,
these are the SSH server's host-key and the public-key for the 'user' login.

For more information, please read _repos/gems/src/server/ssh_terminal/README_
and take _repos/gems/run/ssh_terminal.run_ for a ride.


Removed networking support from Noux
====================================

; @ehmry

commit 1370fa7631b3cb1d2f496d38a3b152a8416ae420
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Thu Aug 30 14:56:02 2018 +0200

    Remove Noux networking support
    
    Noux networking is not well tested and not in practical use. It also
    uses a number of deprecated libraries.
    
    Ref #2535
    Fix #2955


Random numbers
==============

; @ehmry

commit a07707f08d3201f7760c79400b54afc44a3b4085
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Sat Nov 10 14:56:27 2018 +0100

    Entropy visualizer for Nitpicker

commit 33ebdeee1f440d63f64830a329ba73024f47c11d
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Sat Nov 10 15:08:51 2018 +0100

    Jitter sponge entropy server
    
    A terminal server that reads out entropy generated from CPU jitter
    amplified using a Keccak sponge construction.

commit 1f028daae3df2ed92e22ec9c08c82dd28c7feb81
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Sat Nov 10 11:55:21 2018 +0100

    Port of the eXtended Keccak Code Package
    
    https://github.com/XKCP/XKCP
    https://keccak.team/keccak.html


New depot packages
==================

Our work on the Genode-based test-automation framework prompted us to a
package for each individual test. As a nice byproduct, we introduced depot
recipes of all components the tests depend on, and a few more. Thereby, the
following new depot content has become available:

Source archives for the base-hw microkernel for various platforms:
* src/base-hw-arndale
* src/base-hw-imx53_qsb
* src/base-hw-imx53_qsb_tz
* src/base-hw-odroid_xu
* src/base-hw-panda
* src/base-hw-rpi
* src/base-hw-wand_quad

Source archives for the Fiasco.OC microkernel for a few platforms:
* src/base-foc-pc
* src/base-foc-arndale
* src/base-foc-pbxa9

Source archives of components used by the test scenarios:
* src/nic_bridge
* src/python

Source archives and package runtimes needed for hosting the gcov tool and
the GCC tool chain:
* src/gmp, src/mpc, src/mpfr
* src/binutils_x86, src/gcc_x86
* src/gnumake, src/sed, src/tar, src/which
* pkg/gcov
* pkg/noux-build-x86


Platforms
#########

NOVA microhypervisor
====================

Up to now the NOVA kernel reserved a statically configured part of the system
memory as kernel memory. The configured memory had to been chosen during link
time. However, with the event of Sculpt the actual target load nor the target
machine and its available system memory is not known beforehand, which makes
it hard to choose a well suited kernel memory amount fitting all.

We can't lift this structural issue, but could mitigated it to some degree.
The kernel now looks up the overall available system memory during boot time
and allocates depending on three configuration options during boot time the
kernel memory. So, the overall kernel memory is still static, but depending
on the target machine adjusted.

The three configuration options can be adjusted in the Makefile of the kernel.
CONFIG_MEMORY_BOOT is the amount of kernel memory allocated in the BSS
statically, effectively chosen during link time.
CONFIG_MEMORY_DYN_MIN && CONFIG_MEMORY_DYN_PER_MILL configures the dynamic
part of the kernel memory allocation applied during early kernel boot time.
CONFIG_MEMORY_DYN_MIN is the amount of memory which should be allocated at
least. CONFIG_MEMORY_DYN_PER_MILL defines the amount of the system memory in
per mill which should be allocated at most. The overall maximum kernel memory
is restricted to ~1G for 64bit, due to the chosen internal virtual memory
layout.

Execution on bare hardware (base-hw)
====================================

Regarding our own kernel development this release comprises enhancements to
increase performance on the supported ARM platforms. Most significantly is the
default enabling of the FPU on all boards Genode runs on top of. All components
build for ARMv6 and ARMv7a are now compiled to make use of it. Therefore, the
runtime behaviour of certain scenarios can change significantly on ARM when
using the new release.

Moreover, after recognizing poor memory-access latency on several Cortex-A9
plaforms, a regression in the enabling of the L2 cache got discovered and fixed.
Especially, the i.MX6 based Wandboard Quad cache, clocking and power settings
got tweaked well to achieve reasonable CPU and memory performance.

This performance-wise line of work will be continued with regard to the next
release.
