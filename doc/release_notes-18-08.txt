

              ===============================================
              Release notes for the Genode OS Framework 18.08
              ===============================================

                               Genode Labs



; intro
; @nfeske


Sculpt with Visual Composition
##############################

; @nfeske

commit 3372c1a7b24ba617c90307c32711d11d4d44d905
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon May 28 01:24:02 2018 +0200

    sculpt: manage leitzentrale window layout
    
    With this patch, the sculpt manager takes over the role the window
    layouter of the leitzentrale, which eliminates the need to manually
    position and size the inspect window.

commit fec223016f98a3f9a2f158e306c770ba422aec90
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Mon Jun 18 10:53:34 2018 +0200

    Sculpt: route input_filter chargen requests to config_fs_rom
    
    The top-level Sculpt configuration is routing ROM requests for chargen
    files from the input_filter to the parent, and this prevents new chargen
    files to specified, for instance the German or Workman layout. Route ROM
    requests with a combination of label_prefix and label_suffix patterns to
    the config_fs_rom component, allowing the input_filter to be dynamically
    reconfigurable.
    
    Fix #2872

commit 46241da795cfdcfdc342bc91df9d4665bf047c05
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Jun 26 15:36:01 2018 +0200

    Runtime for saving copies of Sculpt's report fs
    
    Fixes #2849

commit a2dc07056eadf0449129e5631a3d1d8ef3432c43
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Jul 4 15:25:59 2018 +0200

    sculpt: use cached_fs_rom as depot_rom
    
    Fixes #2904

commit ac335ef58aa31179e6c5bb740567382320e1dfbf
Author: Emery Hemingway <ehmry@posteo.net>
Date:   Mon Jul 9 13:00:40 2018 +0200

    Add Game Boy emulator to sculpt.run

commit 74b07dedda48a3c3a00dc84fbe36a38d9f90e4c8
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Aug 15 17:39:08 2018 +0200

    sculpt: separate launchers from deploy config
    
    Fixes #2938

commit 03f8bda69b8dd33f200a783595e3d48cfadaf8b3
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Aug 22 14:54:51 2018 +0200

    sculpt: condition checks for running components
    
    By caching the state reports generated by the runtime init, the sculpt
    manager becomes able to quickly check for the presence of components. So
    we can apply routing-dependency checks not only prior starting
    components but also while components are running.
    
    Fixes #2912

commit 737c6b12f6c4c72e397e0e3fff73c782850299ef
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Jul 5 16:57:43 2018 +0200

    sculpt: runtime view
    
    This patch adds a graph of the current runtime state to the
    leitzentrale. The topology of the graph depends on the first routing
    rule of each component. For this reason, the patch re-orders routing
    policies to make the most important route the first in the list.
    
    The user can switch between the runtime view and the inspect window
    by clicking on the corresponding menu dialogs. E.g., a click on the
    storage dialog reveals the inspect window.

commit 7e87a46e521c3fa1808f2c45897e580b4d8abf3d
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Aug 23 13:39:21 2018 +0200

    sculpt: basic interaction with runtime view
    
    This patch enables the user to click on a component in the runtime view
    to reveal more information such as the used/assigned RAM/caps and
    secondary dependencies.


Device drivers
##############

Linux device-driver environment based on kernel version 4.16.3
==============================================================

We updated our DDE Linux version from 4.4.3 to 4.16.3 to support newer
Intel wireless cards as well as Intel HD graphics devices. Since there
were some changes to the Linux internal APIs we had to adapt the Linux
emulation environment. We managed to do that in a way that still makes
it possible to keep using the old Linux version for certain drivers like
the FEC network driver and the TCP/IP stack. Those will be updated later
on. Further more, some drivers received additional features while updating
the code base.


Updated and enhanced Intel framebuffer driver
=============================================

In addition to updating the Intel graphic driver it comes with support for
changing the brightness of notebook displays. The driver configuration
supports now an additional attribute named 'brightness' expecting values in
percentage:

! ...
! <config>
!  <connector name="LVDS-11" width="1280" height="800" hz="60" brightness="75" enabled="true"/>
! </config>
! ...

By default the brightness is set to 75 percentage. Additionally, on each
connector status change the connector report provides provides the last set
brightness for supported displays.

! <connectors>
!   <connector name="LVDS-11" connected="1" brightness="75">
!     <mode width="1280" height="800" hz="60"/>
!     ...
!   </connector>
!   <connector name="HDMI-A-1" connected="false"/>
!   ...
! </connectors>

Updated and reworked Intel wireless driver
==========================================

In addition to updating the iwlwifi driver's code base that now comes with
support for 8265 as well as 9xxx devices, the WPA supplicant code was also
updated to a recent git version that contains critical fixes for issues like
the KRACK exploit.

Since the updated driver requires newer firmware images which are not as easily
accessible as the old ones, as well we now provide the appropiate images
ourselves:

[https://github.com/cnuke/dde_linux_firmware - Firmware images for DDE Linux]

We took the opportunity to also rework the wifi_drv's configuration interface.
The old driver used the 'wpa_supplicant.conf' POSIX config file interface
as configuration mechanism. Unfortunatly, this implementation detail became
apparant to the user of the driver because a file system that provided a place
to store the file had to be configured. For this reason, we now make use of the
CTRL interface of the supplicant and implemented a Genode specific backend.
In this context we changed the structure of the configuration of the driver.

The driver still reports its current state but the report is now simply called
'state' instead of 'wlan_state'. At the moment SSIDs are provided verbatim in
the report and are not sanatized. SSIDs that contain unusal characters like '"'
and the NUL byte will lead to unparsable reports. This is also true for the
'accesspoints' report that now also is simply called 'accesspoints' instead of
'wlan_accesspoints'.

The main configuration was moved from the common '<config>' node to
a new ROM called 'wifi_config'. In doing so we cleanly seperated the wireless
configuration from the component's internal configuration like the libc or VFS
settings that are not supposed to change during the components lifetime. The
new 'wifi_config' configuration looks as follows:

!<wifi_config connected_scan_interval="30" scan_interval="5">
!  <accesspoint ssid="Foobar" protection="WPA2" passphrase="allyourbase"/>
!</wifi_config>

The type of the top node is ignored by the driver and can be chosen freely.
The 'connected_scan_interval' specifices the timeout after which the driver
will request a new scan of the existing accesspoints while being already
connected to one accesspoint. This setting influence the frequency at which
the driver will make a roaming decision within the network (SSID). The
'scan_interval' attribute specifices the timeout after which a new scan
request will be executed while stilling trying to find a suitable accesspoint.
In addition to those attributes there is also 'use_11n' that, however, only
be evaluated once on start-up to enable or rather disable 11N support within
the iwlwifi module. It cannot be toggled at run-time. Furthermore there are
various verbosity attributes like 'verbose' and 'verbose_state'. If either of
those is set to yes, the driver will print diagnostic messages to the LOG
session. They are toggable at run-time. It is now also possible to temporarily
suspend the radio activity of the wireless device by setting the 'rfkill'
attribute to 'yes'. This will basically disable all connectivity and can
be freely set at run-time.

The '<accesspoint>' node replaces the previously used '<selected_network>'
node. The SSID of the preferred network is set via the 'ssid' attribute. Like
the SSID in the driver's reports its value is copied verbatim and at the
moment there is no way to express or escape non alphanumeric characters.
The type of protection of the network is set via the 'protection' attribute.
Valid values are 'WPA' and 'WPA2'. The alphanumeric password is set via the
'passphrase' attribute. Setting a PSK directly is not supported for now.
The configuration can contain more than one 'accesspoint' entry. In this case
the driver will chose the network with the best quality from the list. To
prevent the driver from auto-connecting to a network, the 'auto_connect'
attribute can be set to 'false'. The 'bssid' attribute may be used in addition
to the 'ssid' attribute to select a specific accesspoint within one network.

There is no backwards compatibility for the old configuration format. Users
are advised to change their components.

As an unfortunate regression some if not all 6xxx cards will not work
properly. We are working on fixing this issue.


De-componentized USB stack
==========================

; @skalk


Isochronous USB devices
=======================

; @ssumpf

commit 037a0d6822362edde53eff2f146f65b8d4bf74c0
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Fri Jul 6 15:13:43 2018 +0200

    usb_drv: add isochronous packet support
    
    Commit extents USB session an driver accordingly.
    
    issue #2910

commit 82075a340d5c4b0f1a07fcc8f73d940938a56880
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Fri Jul 6 15:30:09 2018 +0200

    qemu-usb: add isochronous packet support to XHCI
    
    fixes #2910


Updated iPXE-based NIC driver
=============================

Since Genode 18.05, we extended our support of Intel Ethernet NICs by
another I219-LM variant and I218V. We also introduced I210 support
including upstream fixes for boot-time MAC address configuration.


Experimental runtime for Zircon-based drivers
=============================================

The new dde_zircon repository provides a device-driver environment for
Google's Zircon microkernel. It consists of the 'zircon.lib.so' shared
library, which implements an adaption layer between Zircon and Genode, and the
'zx_pc_ps2' driver that serves as a proof of concept. Thanks to Johannes
Kliemann for contributing this line of work.


Improved device compatibility of PS/2 driver
============================================

Once again we invested time into our PS/2-driver implementation due to
compatibility issues with keyboards, touchpads, and trackpoints in
recent notebooks. As a result input devices of current Lenovo X and T
notebooks as well as the Dell Latitude 6430u work solid now.


Base framework and OS-level infrastructure
##########################################

Streamlined ELF-binary loading
==============================

In scenarios like Sculpt's runtime subsystem. A parent component may create a
subsystem out of ELF binaries provided by one of its children. However, since
the parent has to access the ELF binary in order to load it, the parent has to
interact with the child service. It thereby becomes dependent on the
liveliness of this child. This is unfortunate because the parent does not need
to trust any of its children otherwise. To dissolve this unwelcome circular
trust relationship, we simplified Genode's ELF loading procedure such that the
parent never has to deal with the ELF binary directly. Instead, the parent
unconditionally loads the dynamic linker only. The dynamic linker -
running in the context of the new component - obtains the ELF binary as a
regular ROM session provided by a sibling component. If this sibling
misbehaves for any reason, the parent remains unaffected.

To achieve this level of independence, we had to drop the handling of
statically-linked executables as first-class citizens. In order to distinguish
static from dynamic binaries, the parent needed to look into the binary after
all. Statically linked binaries and hybrid Linux/Genode (lx_hybrid) binaries
can still be started by relabeling the ROM-session route of "ld.lib.so" to the
binary name, pretending that the binary is the dynamic linker. This can be
achieved via init's label rewriting mechanism:

! <route>
!   <service name="ROM" unscoped_label="ld.lib.so">
!     <parent label="test-platform"/> </service>
! </route>

However, as this is quite cryptic and would need to be applied for all
lx_hybrid components, the patch adds a shortcut to init's configuration.
One can simply add the 'ld="no"' attribute to the <start> node of the
corresponding component:

! <start name="test-platform" ld="no"/>


NIC-router support for multiple uplinks
=======================================

; @m-stein

commit 49a3a0e0d096af943d661294eee3f526c081ebc7
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Tue Jun 5 18:31:40 2018 +0200

    nic_router: multiple uplinks
    
    Introduce the uplink tag:
    
    ! <config>
    !    <uplink label="wifi"  domain="uplink">
    !    <uplink label="wired" domain="wired_bridge">
    !    <uplink               domain="wired_bridge">
    ! <config/>
    
    For each uplink tag, the NIC router requests a NIC session with the
    corresponding label or an empty label if there is no label attribute.
    These NIC sessions get attached to the domain that is set in their
    uplink tag as soon as the domain appears. This means their lifetime is
    not bound to the domain. Uplink NIC sessions can be safely moved from
    one domain to another without being closed by reconfiguring the
    corresponding domain attribute.
    
    Attention: This may render previously valid NIC router configurations
    useless. A domain named "uplink" doesn't automatically request a NIC
    session anymore. To fix these configurations, just add
    
    ! <uplink domain="uplink"/>
    
    or
    
    ! <uplink label="[LABEL]" domain="uplink"/>
    
    as direct subtag of the <config> tag.
    
    Issue #2840

commit 0b8520a208d07dc3df02b893fcd3d318651388f1
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Jun 18 19:04:40 2018 +0200

    nic_router: act as ICMP Echo server
    
    The ICMP-Echo-server functionality of the router has the following
    configuration attributes (default values shown):
    
    ! <config icmp_echo_server="yes">
    !    <domain icmp_echo_server="yes" ... />
    ! </config>
    
    The icmp_echo_server attribute configures whether the router answers ICMP Echo
    requests that address the router. The <config> value affects all domains
    without a <domain> local value.
    
    Issue #2874

commit 2733d3fea56a489071a03a1ee76a823f5b1c4591
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Tue Jun 19 16:20:47 2018 +0200

    nic_router: verbose_packet_drop attribute
    
    The log messages covered by verbose_packet_drop were previously
    configured by the verbose attribute. This isn't the case anymore. Now,
    you can configure them as follows:
    
    ! <config verbose_packet_drop="no" ... >
    !     <domain verbose_packet_drop="no" ... />
    ! <config/>
    
    The new attribute determines whether to log each packet drop and the
    rational behind it. The <config> value affects all domains without a
    <domain> local value.
    
    Issue #2857


New VFS plugin for using lwIP as TCP/IP stack
=============================================

The architecture and philosophy of Genode mandates that network protocol
stacks be moved up and away from the kernel whenever practical. Eliminating
the TCP/IP stack from the TCB of non-networked components has obvious
benifits, but poses a challenge for isolating or sharing IP stacks otherwise.
In the 17.02#Enhanced_VFS_infrastructure release we introduced a Berkeley
Sockets layer to the POSIX C runtime that uses the local virtual-file-system
layer to access an abstract TCP/IP stack via control files. The first stack plugin
for the VFS layer was a port of the Linux IP stack, referred to as Lxip.

Ported in the 9.11#Light-weight_IP_stack__lwIP_ release, the LwIP is stack
is indeed the lightweight alternative to Lxip. LwIP features an low-level
asynchronous API as well as an optional Berkeley Sockets interface. For this
release we reconfigured the latest LwIP release for asynchronous mode only
and drive the low-level API via our so called "socket fs" interface in the
new LwIP VFS plugin. This plugin retains the modest resource usage of the
LwIP library with performance that is competitive with Lxip.

Developers and integrators are encouraged to transition from the old `libc_lwip`
libraries to the new VFS plugin by simply removing the legacy libraries from
components and updating configurations to load and configure the plugin
at runtime.


Dynamic capability-quota balancing
==================================

; @nfeske

commit 950b270e740ab00618f8d1f30989c05f0f969639
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon Jun 4 15:49:29 2018 +0200

    init: support dynamic cap-quota adjustment
    
    This patch makes init's dynamic quota balancing mechanism available for
    capability quotas.
    
    Fixes #2852


Simplified DNS handling of libc-using components
================================================

We overhault the way the libc will lookup up the DNS server. Instead of simply
accessing the commonly used '/etc/resolv.conf' file it will now use the
file given by the 'nameserver_file' attribute to get the DNS nameserver
address. It defaults to '/socket/nameserver' which is the common location when
using the lxip or lwip VFS plugin. As a constraint the libc will read the first
line and expects the nameserver address without any keywords in front of it.


Cached file-system-based ROM service
====================================

The fs_rom server has long been the foundation of dynamic Genode
systems, both for serving configuration and loading component
binaries and libraries. For the server to dynamically update ROM
dataspaces as requested by clients it must maintain independent
dataspaces for each client. This a small price for dynamic
configuration but a burden when serving more than a few static
binary images. The cached_fs_rom server in an alternative ROM
service that deduplicates dataspaces across client sessions as well
as load and deliver sessions requests out-of-order. Implementing
`cached_fs_rom` required an amendment to the RM session interface to
support read-only attachments in managed dataspaces. This allows the
server to allocate a managed memory region for each session, map the
dataspace with file content into the region without write permissions, then
serve a dataspace capability for this region to clients. This is prerequisite for
safely delegating static memory across clients. Granting access to such a
component would of course allow a client to discover which files have
been loaded by other components by measuring the round-trip time for
session requests, but this discovery is mitigated in the Sculpt OS by
restricting components to a ROM whitelist. Under these conditions a
component may only determine if a component with a similiar whitelist
has been loaded previously, but only for ROMs that have not been loaded
by the dynamic linker before measurements can be taken.


VFS plugin for importing initial content
========================================

The previous release added a long anticipated feature plugin for the VFS
layer, the Copy-On-Write plugin, or COW. This plugin would transparently
perform writes to a read-only file to a writable file in a different location, such
as disk images for virtual machines. The initial implementation appeared to
provide these semantics without sophisticated knowledge of what portions
of a file-system had been duplicated for writing, but in practical use the
plugin suffered from a number of issues. First, the plugin was not able to
reliably detect recursion into itself, and second, chaining asynchronous
operations together proved to be more complex than we would like.

To look instead to features we were actually using rather than features we
anticipated, we focused on the initial content feature of the `ram_fs`. This
server provides a non-persistent file-system that can be populated with
content before servicing clients. To further the goal of providing a toolkit
of orthoginal components we have been gradually merge the `ram_fs` server,
the first file-system server, into the newer, more powerful `vfs` server.
component. Initial population happened to be the last feature before parity,
so we created a special `import` plugin to the VFS library that instantiates a
temporary internal file-system that is copied to root of the main VFS instance.
The copy is always recursive but non-descructive by default. Should the
import process overwite existing files, simply add an 'overwrite="yes"` to the
plugin configuration node. This plugin covers all use-cases we had for the
COW plugin and turned out to be quite intuitive, so with this release we
removed COW and replaced it with the `import` plugin.

The plugin is quite easy to use, for example, importing a shell configuration
into a Noux instance:

! <start name="shell">
!   <binary name="noux"/>
!   ...
!   <config>
!     <start name="/bin/bash">
!       <env name="HOME" value="home" />
!     </start>
!     <fstab>
!       <tar name="coreutils.tar" />
!       <fs/>
!       <import overwrite="true">
!         <dir name="home">
!           <inline name=".bash_profile">
!           PS1="\w $ "
!           </inline>
!         </dir>
!       </import>
!     </fstab>
!   </config>
! </start>

To compare the use of the plugin in the VFS server:

! <start name="config_fs" caps="200">
!   <binary name="vfs"/>
!   ...
!   <config>
!     <vfs>
!       <ram/>
!       <import>
!         <dir name="managed">
!           <rom name="fonts"  label="fonts.config"/>
!           <rom name="fb_drv" label="fb_drv.config"/>
!           <rom name="wifi"   label="wifi.config"/>
!           <rom name="installation"/>
!           <rom name="runtime"      label="empty_runtime.config"/>
!           <rom name="input_filter" label="input_filter.config"/>
!           <inline name="depot_query"><query/></inline>
!         </dir>
!         <rom name="input_filter"  label="input_filter.config"/>
!         <rom name="fb_drv"        label="fb_drv.config"/>
!         <rom name="nitpicker"     label="nitpicker.config"/>
!         ...
!       </import>
!     </vfs>
!     <policy label="config_fs_rom -> " root="/" />
!     <policy label="rw"                root="/" writeable="yes" />
!   </config>
! </start>

And the traditional `ram_fs` content configuration:

! <start name="config_fs" caps="200">
!   <binary name="ram_fs"/>
!   ...
!   <config>
!     <content>
!       <dir name="managed">
!         <rom name="fonts.config"         as="fonts"/>
!         <rom name="fb_drv.config"        as="fb_drv"/>
!         <rom name="wlan.config"          as="wlan"/>
!         <rom name="installation"/>
!         <rom name="empty_runtime.config" as="runtime"/>
!         <rom name="input_filter.config"  as="input_filter"/>
!         <inline name="depot_query"><query/></inline>
!       </dir>
!       <rom name="input_filter.config"  as="input_filter"/>
!       <rom name="fb_drv.config"        as="fb_drv"/>
!       <rom name="nitpicker.config"     as="nitpicker"/>
!       ...
!     </content>
!     <policy label="config_fs_rom -> " root="/" />
!     <policy label="rw" root="/" writeable="yes" />
!   </config>
! </start>


Enhanced Ada language support
=============================

Genode's runtime for the Ada programming language was extended by exception
support interfacing with C++. Ada exceptions can now be caught in C++ and
provide type and error location information when raised. Further improvements
are runtime support for 64-bit arithmetics and some minor fixes in gnatmake's
include paths. Thanks to Johannes Kliemann for these welcome improvements!


Enhanced Terminal compatibility
===============================

During this release cycle a simple SSH client was added to the world repository
and we quickly noticed that our graphical terminal was unprepared for the wide
variety of terminal escape sequences found in the wild. The escape sequence
parser in the `terminal` server now is now able to handle or ignore the litany
of sequences that might be considered part of the ad hoc VT100/Screen/Xterm
standard. We may never be able to say that we handle them all, but the
`terminal` server can now be used for practical purposes with most TUI applications.

Libraries and applications
##########################

Python 3
========

@valivalpas


VirtualBox updated to version 5.1.38
====================================

We updated the VirtualBox 5 port on Genode to the latest available 5.1 version.


New component for querying information from a file system
=========================================================

There are situations where a security critical application needs to obtain
information stored on a file system but must not depend on the liveliness of
the file-system implementation. A prominent example is the sculpt manager of
Sculpt OS. Instead of accessing the file system directly, it uses a helper
component that performs the actual file-system access and generates a report
containing the aggregated information. Should the file system crash or become
unavailable for other reasons such as the removal of a USB stick, the helper
component may get stuck but the security-critical application remains
unaffected.

The new fs_query component resides at _repos/gems/src/app/fs_query/_ and is
accompanied with the _fs_query.run_ script. The file system is configured as a
component-local VFS. The component accepts any number of '<query>' nodes
within its '<config>' node. Each '<query>' node must contain a 'path'
attribute pointing to a directory to watch. The component generates a report
labeled "listing". For each existing queried directory, the report contains a
'<dir>' node with the list of files as '<file>' nodes featuring the
corresponding 'name' as attribute value.

A '<query>' can be equipped with a 'content="yes"' attribute. If set, the
content of the queried files is supplemented as body of the '<file>' nodes.
The reported content is limited to 4 KiB per file. If the content is valid
XML, the '<file>' node contains an attribute 'xml="yes"' indicating that the
XML information is inserted as is. Otherwise, the content is sanitized.


Updated ported 3rd-party software
=================================

User-level ACPICA
-----------------

commit 7cfa2331669ae93f5d9cbe8cf1d010931dabc938
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Aug 20 15:48:39 2018 +0200

    acpica port: update to version 2018-08-10
    
    Fixes #2935


Platforms
#########

New Intel Microcode update mechanism
====================================

Applying CPU microcode patches is typically a task done by UEFI/BIOS firmware
shipped by the hardware vendors of PCs and/or motherboards. However, for
various reasons machines may get not long enough or not quickly
enough new firmware updates. Based on the recent high rate of disclosure of
hardware bugs in CPUs of the Spectre family, the desire is high to apply
microcode patches close in time. To address this concern, we added principle
support to apply Intel microcode updates for Genode.

As first step, we added support to download the Intel microcode patches via
the Genode port mechanism.

! tool/ports/prepare_port microcode_intel

As next step, a Genode component, as showcased by 'repos/ports/run/microcode.run',
can compare the current microcode patch level on Genode/NOVA with the
downloaded Intel microcode. The relevant information about the CPUs and their
microcode patchlevel are provided by the platform_info ROM on Genode/NOVA.

If a microcode update is necessary, the Intel microcode can be applied during
the next boot. We decided to implement this functionality as a separate
chained bootloader called 'microcode' in order to not inflate all our supported
x86 kernels by additional management code to apply microcode patches on all CPUs.
The 'microcode' bootloader expects a module called 'micro.code' which contains
the specific Intel microcode from the 'microcode_intel' port for the target
CPU. The relevant excerpt of a Genode GRUB2 configuration looks like this:

! multiboot2 /boot/bender
! module2 /boot/microcode serial
! module2 /boot/micro.code micro.code
! module2 /boot/hypervisor hypervisor iommu serial
! module2 /boot/image.elf.gz image.elf

The microcode update functionality got integrated into the
'tool/run/boot_dir/nova' support file and can be enabled by providing a
'apply_microcode' TCL procedure, as showcased in 'repos/ports/run/microcode.run'.

The 'microcode' chained bootloader got developed by Genode as part of the
Morbo project. The 'microcode' bootloader checks for a Intel CPU and a valid
'micro.code' module which matches the currently running CPU. Afterwards, the
the bootloader looks up all CPUs and some LAPIC information by parsing the
relevant ACPI tables. With the information the CPUs get booted, which then
apply the microcode update. In case of hyperthreading CPUs, solely one
hyperthread gets started and applies the update for all hyperthreads.
Finally, all newly started CPUs get halted and the microcode bootloader hands
over control to the next module which is typically the x86 kernel.

Multiprocessor support for our custom kernel on x86
===================================================

As announced on our roadmap for this year, we extended our 'hw' kernel on
x86 with multiprocessor support. The 'bootstrap' part of the
kernel now parses ACPI tables to lookup required CPU information and finally
starts them. The number of the actual running CPUs are now reported by
'bootstrap' to the 'hw' kernel to foster the x86 case, where the maximum
configured CPU count is not identical to the running CPUs - in contrast to our
supported ARM boards.

NOVA microhypervisor
====================

The used NOVA kernel branch got switched to r10, which is a intermediate
result of Cyberus Technology and of Genode to harmonize the independently
developed NOVA kernel branches. We hope to benefit from the NOVA evolution
from each other in the long run by having a common NOVA tribe and short
individual branches.

Feature-wise the r10 branch contains following changes:
* Export kernel trace messages via memory, which can be used by Genode to
  process them for debugging purposes. The feature is used in Sculpt OS
  already and may be tested by 'repos/os/run/log_core.run'.
* Cross-core IPC via NOVA portals can now be restricted
* Avoid general protection fault on AMD machines where SVM is disabled by UEFI firmware
* More robust ACPI table parsing of broken/defect ACPI tables
* Using eager FPU switching on Intel CPUs to mitigate Spectre FPU CVE
* Report CPU microcode patch level information via the hypervisor informatam page

Fiasco.OC microkernel updated
=============================

; @skalk

commit 41fdb1d3691715c5dccb238c6b7e1addfb58d096
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Jun 26 11:23:33 2018 +0200

    foc: update to recent revision r79 (fix #2884)


Build system and tools
######################

Reworked disk-image creation
============================

; @alex-ab, @chelmuth

commit 4067cc7962dbe8b71e9c1a332ac8f9e548ddec56
Author: Roman Iten <roman.iten@gapfruit.com>
Date:   Mon Jun 11 19:08:13 2018 +0200

    run: use sgdisk instead of parted in image/disk
    
    Issue #2862

commit 7e126f7fb65329d0a413eb8f2cc9ac93ff58aaea
Author: Roman Iten <roman.iten@gapfruit.com>
Date:   Tue Jun 12 10:25:06 2018 +0200

    run: use sgdisk instead of parted in image/uefi
    
    Issue #2862


Improved run tool
=================

Unified precondition checks
---------------------------

; @ssumpf

commit 10485b0d39f2dc5d2a8a555449007055e7029324
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Tue Jun 19 19:55:04 2018 +0200

    run: rename 'check_installed' to 'installed_command'
    
    Also remove 'requires_installation_of', while also checking sbin
    directories in 'have_installed'. The run scripts have been adjusted
    accordingly.
    
    Fixes #2853


Stricter validation of configurations at integration time
---------------------------------------------------------

; @m-stein

commit d06176e6cdb9662e8b0d3af58f2b05af7663c967
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Wed Jul 4 14:08:16 2018 +0200

    base: define generic config XSD types globally
    
    The new base/xsd/config.inc defines generic XSD types such as 'Boolean' or
    'Session_label'. It can be included in config XSD files by using:
    
    ! <xs:include schemaLocation="file://${GENODE_CONFIG_INC}"/>
    
    The string ${GENODE_CONFIG_INC} is replaced by the run tool with the
    above mentionened file path.
    
    Issue #2897


Optional preservation of boot-directory content
-----------------------------------------------

; @ssumpf

commit b6bc44fd10ea457222e1b4653a54bb271d74ef26
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Wed May 16 11:03:59 2018 +0200

    run: add support to preserve 'genode' directory
    
    Add '--preserve-genode-dir' to RUN_OPT in order to preserve the 'genode'
    directory in '<build_dir>/var/run/<run-script>'


Configurable AMT power-on timeout
---------------------------------

The boot time sometimes varies vastly between PCs. This is annoying in
particular when AMT Serial-Over-LAN is the only debug option for the
different test machines because Intel ME is quite picky at which time
window AMT SOL connects just fall flat. So, we added a run option to
optionally change the default AMT boot timeout of 5 seconds like
follows.

!RUN_OPT += --power-on-amt-timeout 11

On some PCs we had to increase this option up to 26 seconds, which may
also increase with attached USB mass storage if USB boot is enabled.

