

              ===============================================
              Release notes for the Genode OS Framework 20.05
              ===============================================

                               Genode Labs



;intro
;@nfeske




Capability-based security using seccomp on Linux
################################################

_This section was written by Stefan Thöni of [https://gapfruit.com/ - gapfruit AG] who_
_conducted the described line of work in close collaboration with Genode Labs._

My goal for the Genode Community Summer 2019 was to enable seccomp for
base-linux to achieve an intermediate level of security for a Genode system
running on Linux. To get any security benefit from seccomp, it turned out the
RPC mechanisms of base-linux needed to be significantly reworked to prevent
processes from forging any capabilities.

The new capability-based security on Linux maps each capability to a pair of
socket descriptors, one of which can be transferred along socket connections
using kernel mechanisms. Each invocation of a capability uses the received
socket descriptor to address the server which in turn uses the epoll framework
of the Linux kernel to get notification of incoming messages and the server
side socket descriptor to securely determine the invoked RPC object.
Capabilities which are passed back to the server rather than invoked can be
securely identified by their inode number. This way, no client can forge any
capability.

With the hard part finally finished thanks to a
[https://github.com/genodelabs/genode/pull/3581 - concerted effort] led by
Norman Feske, I could turn back to seccomp. This Linux kernel mechanism
restricts the ability of a process to use syscalls. Thanks to the small
interface used by Genode processes, the whitelist approach worked nicely,
restricting all Genode processes to just 25 syscalls on x86, none of which can
access any file on the host system. Instead all access to the host system must
go through Genode RPC mechanisms to one of the hybrid components which are not
yet subject to seccomp. Although some global information of the host system
may still be accessed, the possibilities of escaping a sandboxed Genode
process are vastly reduced.

Note that these changes are transparent to any user of base-linux in all but
one way: The Genode system might run out of socket descriptors in large
scenarios. If this happens, you need to increase the hard open file descriptor
limit. See 'man limits.conf' for further information.


Feature-completeness of the consistent block encrypter
######################################################

;@m-stein


New revision of the Genode Foundations book
###########################################

The "Genode Foundations" book received its annual update. It is available at
the [https://genode.org] website as a PDF document and an online version.
The most noteworthy additions and changes are:

: <div class="visualClear"><!-- --></div>
: <p>
:  <div style="clear: both; float: left; margin-right:20px;">
:   <a class="internal-link" href="https://genode.org">
:    <img class="image-inline" src="https://genode.org/documentation/genode-foundations-title.png">
:   </a>
:  </div>
: </p>

* The feedback-control-system composition
* Removal of outdated components and APIs (noux, slave API)
* Additional features ('<alias>', unlabeled LOG sessions)
* Recommended next steps after reading of the getting-started section
* Updated API reference ('Mutex', 'Blockade', 'Request_stream', 'Sandbox')

: <div class="visualClear"><!-- --></div>

To examine the changes in detail, please refer to the book's
[https://github.com/nfeske/genode-manual/commits/master - revision history].


The great consolidation
#######################

;@nfeske

Updated block servers using 'Request_stream' API
================================================

;@ssumpf

commit 6e54cad44c69e2b3e9f134ddf0f876103b44da3f
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Fri Feb 21 08:37:08 2020 +0100

    usb_block: switch to Request_stream API
    
    - remove old 'Driver' interface
    - implement Request stream front end
    - fix some namespacing
    
    issue #3661

commit 150d1437558341822146d1bc1595f6b7ddb843a7
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Wed Mar 4 22:12:20 2020 +0100

    os: use Request_stream API in NVMe driver
    
    As a result of the API change the memory handling could be simplified.
    Since the Block session dataspace is now directly used for DMA, we
    actually only have to provide the memory for setting up PRP lists for
    large requests (for the moment more than 8 KiB of data).
    
    As we limit the maximum data transfer length to 2 MiB, we get by with
    just a page per request. Those memory is allocated beforehand for the
    maximum number of I/O requests, which got bumbed to 512 entries. Since
    not all NVMe controllers support such large a maximum data transfer
    length and this many entries, especially older ones, the values are
    capped according to the properties of the controller during
    initialization. (The memory demands of the component are around 3 MiB
    due to setting up for the common case, even if a particular controller
    is only able to make use of less.)
    
    (Although there are controllers whose maximum memory page size is more
    than 4K, the driver is hardcoded to solely use 4K pages.)
    
    In addition to those changes, the driver now supports the 'SYNC' and
    'TRIM' operations of the Block session by using the NVMe 'FLUSH' and
    'WRITE_ZEROS' commands.
    
    Fixes #3702.


Migration from 'Lock' to 'Mutex' and 'Blockade'
===============================================

Since the last release we continued the cultivation of 'Mutex' and 'Blockade'
across the repositories 'base' and 'os' of the Genode framework. The changes
are transparent to a Genode developer mostly. One noticeable
change is that the Genode::Synced_interface now requires a 'Mutex' as template
argument, the 'Lock' class is not supported anymore. The known user outside
of the repository of 'os' and 'base', namely Seoul, got adjusted to this change.


Retired Noux runtime environment
================================

;@nfeske

commit 34a60b56f60064a7db2b70e7829fbcc0254b19b4
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Mar 6 11:10:23 2020 +0100

    Remove noux from fs_query.run
    
    Issue #3696

commit cc8552f81e1f0916da1562a862380c2afa7a38a4
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Mar 6 11:16:15 2020 +0100

    Remove noux_vfs_audit.run
    
    This run script was merely a development vehicle.
    
    Issue #3696

commit cacbad1bd832b82a67568ab0e47439f78045ebf3
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Mar 6 15:00:04 2020 +0100

    Remove noux from ssh_terminal.run
    
    Issue #3696

commit e3bc77c386ff4e06dcbbbd2bca9c6bf84df41b98
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Mar 6 19:06:02 2020 +0100

    Remove noux from SSH exec terminal
    
    This patch replaces the former Noux instance by a sub init that hosts
    the combination of VFS + fs_rom + bash. If bash exits, the whole sub
    init exits, which implicitly tears down the terminal session used by the
    sub init. The latter is expected by the test sequence.
    
    Issue #3696

commit 1d480e3329b6afaafa00e913c676eaef9426bead
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 10 08:46:35 2020 +0100

    Remove noux from tool-chain test
    
    Issue #3696

commit a7e7eeec384daed7e0bccbd05a84bbd5066b4b68
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:31:06 2020 +0100

    Remove noux from Vim example scenario
    
    Issue #3696

commit b8738dee9058da82c567d3c8649884cd268b007e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:33:26 2020 +0100

    Remove noux_terminal_fs.run script
    
    This run script tested the terminal VFS plugin as a new feature of noux.
    In the meantime, the plugin remains as the only way for the interaction
    of command-line-based applications with the terminal session. Hence,
    the mechanism is now stressed by many other scenarios.
    
    Issue #3696

commit 50a1e540a07e39f2014a146d03e898cc82398e52
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:38:43 2020 +0100

    Remove noux_bash.run script
    
    This run script is superseded by the bash.run script.
    
    Issue #3696

commit 5a02b5fd2385cc2dbcefbe776fffb95175ccfdfb
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:39:38 2020 +0100

    Remove noux_fork.run script
    
    This run script is superseded by pkg/test-fork.
    
    Issue #3696

commit c086bba71abf5f9137be1ff0e1c59e588c1f9b61
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:41:25 2020 +0100

    Remove noux_fs.run
    
    The test exercised the mounting of an ext2 file system in the noux
    runtime. This feature is nowadays routinely stressed by Sculpt OS.
    
    Issue #3696

commit 951f484fad7fff8ee624f2a5467ddda6b3287a29
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 14:50:43 2020 +0100

    Remove noux_gdb.run script
    
    This interactive run script is not regularly tested nor used.
    
    Issue #3696

commit 2f598e5680566c400463d3133207395cedea2ac8
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 15:43:06 2020 +0100

    Remove noux_uname.run script
    
    This run script is outdated and not regularly tested. In fact, the
    tested mechanism (obtaining values from a '.sysctl/' directory) is
    nowhere to be found, neither in noux nor the libc. The test still
    returns success as it merely checks for the completion of the sequence,
    not the printed results. Hence, it is not worth preserving.
    
    Issue #3696

commit 4961c84f12bdae339c3f9012974e4ff220558dbc
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Mar 17 16:26:58 2020 +0100

    Remove noux from vbox_share.inc
    
    This snippet is used by the vbox5_win7_64_share.run script.
    
    Issue #3696

commit cf052996d372b805efd3690fccbd01b9b56356b9
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 18 10:45:28 2020 +0100

    Remove pkg/noux-build-x86
    
    Use-case-specific Unix runtimes should better be realized via Goa now.
    
    Issue #3696

commit 208294b0d383346e5ba9b9b6e2cc581ea30b93e1
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 18 11:01:05 2020 +0100

    Turn pkg/noux-system into pkg/system_shell
    
    The new package does no longer require noux.
    
    Issue #3696

commit ca5c25ac04bcc2c2071a1149fffbfa2d68786282
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 25 11:39:45 2020 +0100

    sculpt: replace log-noux instance by stdin2out
    
    Issue #3696

commit 5347278136d65648ad026c340ea9f5ddf0c09ee6
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 25 17:08:36 2020 +0100

    sculpt: perform prepare step without noux
    
    Issue #3696

commit 42a77c531a49027c954a259b20be6fad1c70303e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Mar 25 20:23:40 2020 +0100

    sculpt: remove noux runtime from inspect view
    
    Issue #3696

commit 4dd110ce5ef4d4a04475eee14210c99103649bcb
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Mar 26 16:37:36 2020 +0100

    Remove noux runtime
    
    The feature set of noux is fully covered by the regular C runtime now.
    
    Fixes #3696


Removed components and features
===============================

RAM file-system server
~~~~~~~~~~~~~~~~~~~~~~

The 'ram_fs' file-system server has become obsolete because its feature
set is covered by the generic 'vfs' server when combined with the import VFS
plugin:

! <start name="ram_fs"...>
!   ...
!   <config>
!     <vfs>
!       <ram/>
!       <import>
!         ...
!       </import>
!     </vfs>
!     ...
!   </config>
! </start>

Since the VFS server is a full substitute, the current release drops the
original 'ram_fs' server.


Input-merger component
~~~~~~~~~~~~~~~~~~~~~~

The input-merger component was introduced in version
[https://genode.org/documentation/release-notes/14.11#New_input_merger - 14.11]
as a mechanism for merging PS/2 and USB HID input streams.
It was later superseded by the generic input filter in version
[https://genode.org/documentation/release-notes/17.02#Input-event_filter - 17.02].
The functionality of the input merger can be achieved with the input filter
using a configuration like this:

! <config>
!   <input label="ps2"/>
!   <input label="usb"/>
!   <output>
!     <merge>
!       <input name="ps2"/>
!       <input name="usb"/>
!     </merge>
!   </output>
! </config>

The current release removes the input merger.


OpenVPN moved to genode-world repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since we do not consider our initial
[https://genode.org/documentation/release-notes/14.08#New_port_of_OpenVPN - port of OpenVPN]
as an officially supported feature of Genode, we moved it to Genode-world
repository.


Rust support removed
~~~~~~~~~~~~~~~~~~~~

Support for the Rust programming language was added as a community
[https://github.com/genodelabs/genode/pull/1899 - contribution] in 2016. It
included the ability to supplement Rust code to Genode components via Genode's
build system, a few runtime libraries, and a small test case. However, the
addition of Rust remained a one-off contribution with no consecutive
engagement of the developer. Over the years, we kept the feature alive - it
used to be exercised as part of our nightly tests - but it was never picked up
by any regular Genode developer. Once it eventually became stale, it was no
longer an attractive feature either because it depended on an outdated nightly
build of the Rust tool chain.

The current release removes Rust to lift our maintenance burden. To
accommodate Rust developers in the future, we may consider supporting Rust on
Genode via the [https://github.com/nfeske/goa - Goa] tool, and facilitating
regular tools and work flows like cargo.


Python2 removed
~~~~~~~~~~~~~~~

With Python3 present in the Genode world repository since version
[https://genode.org/documentation/release-notes/18.08#Python_3 - 18.08],
the time was overdue to remove our original port of Python2 from Genode's main
repository.


Init's ancient '<configfile>' feature removed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The '<configfile>' feature of init allows the use of a ROM session for
obtaining the configuration for a started component. It has long been replaced
by the label-matching-based session routing.

! <route>
!   <service name="ROM" label_last="config">
!     <parent label="another.config"/> </service>
!   ...
! </route>

Since its naming is rather inconsistent with our terminology (ROM modules are
not files, the "name" is actually a "label") and its use case is covered by
init's generic session-routing mechanism, we took the chance to remove this
legacy with the current release.


Board support outside the Genode main repository
================================================

;@skalk

commit f051065582c198f36be12ec6fe0833e1ff9561c1
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Mar 23 14:45:58 2020 +0100

    Retire OMAP4 support
    
    Fix #2850

commit 0e49336b96b8438591e5d688799640d410d1c73c
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Apr 7 00:42:50 2020 +0200

    Retire Exynos 5 support (fix #3725)


Base framework and OS-level infrastructure
##########################################

New platform driver for the ARM universe
========================================

;@skalk

commit 337c20116d9782efccbca21f8aae36072f02de8c
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Apr 22 17:55:18 2020 +0200

    os: refactor i.MX53 interactive drivers (ref #3299)
    
    * Remove input driver specific to i.MX53 tablet board from QSB driver pkg
    * Move GPIO settings for QSB LVDS backlight out of framebuffer driver into
      GPIO driver config
    * Move PWM driver functionality out of framebuffer driver
    * Make framebuffer driver configureable, and less dependent on
      platform driver i.MX53 specifics

commit b7aaeb58736b1df90902650f874718556e0289b6
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu May 14 15:28:46 2020 +0200

    Annotate io_mem session interface with RAM_QUOTA
    
    Ref #3299

commit 72c6f3aa159582612db06021759c7e6159397882
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu May 14 15:30:31 2020 +0200

    Annotate irq session interface with RAM_QUOTA
    
    Ref #3299

commit 2aa254119aa35b19a04c6639aa169d8bcc883d1c
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri May 22 12:47:16 2020 +0200

    usb_drv: include specific rpi platform_session API
    
    The rpi_usb_drv uses the rpi-specific variant of the platform_session API.
    Therefore, it has to include it excplicitly.
    
    Ref #3299

commit 1bb89ee3ee9710663a92efad0f5601bb87dea0b4
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu May 14 15:35:40 2020 +0200

    os: introduce common platform driver for ARM
    
    Ref #3299

commit a708972aff8ecaaffd16a06ffadc6e304bbae007
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri May 22 12:19:03 2020 +0200

    os: pl050, pl11x, lan9118 use ARM platform driver
    
    Make the framebuffer driver for pl11x chipsets,
    the ps2 input driver for pl050, and the lan9116 NIC driver independent from
    the pbxa9 board by using the newly introduced common ARM platform driver API.
    
    Ref #3299

Block-device sync operation support
===================================

;@cnuke

commit 5225d12381153b9fe5a09a287765ad208942fa45
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Wed Feb 19 14:10:17 2020 +0100

    ahci: add sync operation support
    
    - implemement 'flush cache ext' for ATA
    - enable sync operation for request stream
    
    issue #3636

commit ea78d85d3576487574ca8a7bf60eaf6a87599806
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Mon May 4 14:24:39 2020 +0200

    ahci: SYNC with empty NCQ queue only
    
    Fixes #3746

commit ea78d85d3576487574ca8a7bf60eaf6a87599806
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Mon May 4 14:24:39 2020 +0200

    ahci: SYNC with empty NCQ queue only
    
    Fixes #3746


commit 2495a86aff3c1ad6fef413fbf07b84f4359cd0ce
Author: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date:   Wed Feb 19 18:53:14 2020 +0100

    block_tester: add 'sync' command to replay
    
    issue #3636

commit a71ef1642314cb58c57cfcdfce808dc6a9650b26
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Tue Feb 18 14:43:11 2020 +0100

    vfs: implement 'sync' in Block VFS plugin
    
    Fixes #3659.

commit 336228f3577e4065d6a3a28cf9ee7d4e5b5d01f1
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Mon Mar 23 17:13:39 2020 +0100

    os: handle SYNC packet in lx_fs
    
    Call 'fsync(2)' on files and directories.
    
    Fixes #3711.


Base API refinements
====================

Deprecation of unsafe 'Xml_node' methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

One year ago, we
[https://genode.org/documentation/release-notes/19.02#Improved_API_safety - revised]
the interface of Genode's XML parser to promote memory safety.
The current release marks the risky API methods as deprecated and updates
all components to the modern API accordingly.


Replaced 'Genode::strncpy' by 'Genode::copy_cstring'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since the first version of Genode, the public API features a few
POSIX-inspired string-handling functions, which were usually named after their
POSIX counterparts. In the case of 'strncpy', this is unfortunate because
Genode's version is not 100% compatible with the POSIX 'strncpy'. In
particular, Genode's version ensures the null-termination of the resulting
string as a mitigation against the most prevalent memory-safety risk of POSIX
'strncpy'. The current release replaces 'Genode::strncpy' with a new
'Genode::copy_cstring' function to avoid misconceptions caused by the naming
ambiguity in the future.


LOG session
~~~~~~~~~~~

The return value of 'Log_session::write' got removed. It was never meaningful
in practice but ignoring the value at the caller site tends to make static
code analyzers nervous.


Removed 'Allocator_guard'
~~~~~~~~~~~~~~~~~~~~~~~~~

The 'Allocator_guard' was an
[https://genode.org/documentation/release-notes/11.02#Comprehensive_accounting_of_core_resources - early]
take of a utility for tracking and constraining the consumption of memory
within a component. However, we later
[https://github.com/genodelabs/genode/issues/1039 - got aware] of several
limitations of the taken approach. In short, the 'Allocator_guard' tried
to attack the accounting problem at the wrong level of abstraction.
In Genode
[https://genode.org/documentation/release-notes/17.05#Merged_RAM_and_PD_services_of_the_core_component - 17.05],
we introduced a water-tight alternative in the form of the
'Constrained_ram_allocator', which was gradually being picked up be new
components. However, the relic from the past still remained present in several
time-tested components including Genode's core component. With the current
release, we finally removed the 'Allocator_guard' from the framework and
migrated all former users to the 'Constrained_ram_allocator'.

The adjustment of core in this respect has the side effect of a more accurate
capability accounting in core's CPU, TRACE, and RM services. In particular,
the dataspace capabilities needed for core-internal allocations via the
'Sliced_heap' are accounted to the client now. The same goes for nitpicker and
nic_dump as other former users of the allocator guard. Hence, the change
touches code at the client and server sides related to these services.


C runtime
=========

Self-hosted Genode tool chain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@nfeske

; refinements wrt pipes, error handling -> Genode tool chain


Decoupling C++ runtime support from Genode's base ABI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Traditionally all Genode components are linked (explicitly or
implicitly) to the platform library and dynamic linker ld.lib.so. This
library provides the kernel-agnostic _base_ API/ABI and hides
platform-specific adaptations from the components. Also, ld.lib.so
includes the C++ runtime which is provided via the C++ ABI and
implements support for runtime type information, guard variables, and
exceptions. So, C++ programs using the named features are guaranteed
to work on Genode as expected.

Since the introduction of our
[https://genode.org/documentation/developer-resources/package_management - package management]
and depot archives in
[https://genode.org/documentation/release-notes/17.05#Package_management - release 17.05]
software packages are required to explicitly specify API dependencies.
For Genode components using the base framework, e.g., to implement
signal handlers in the entrypoint, the dependency to the _base_ API is
natural. Genode-agnostic programs using only the LibC or C++ STL on
the other hand shall not depend on one specific version of the
platform library. Unfortunately up to this release, this independence
could only be accomplished for C or simple C++ programs for the
reasons named before and all C++ components had to specify the
dependency to the base ABI. The unwanted result of this intermixture
was that complex POSIX programs (e.g., Qt5 applications) had to be
updated every time the base API changed in a tiny detail.

In this release, we cut the dependency on the LibC runtime level and
provide the C++ ABI symbols also to the LibC symbols. The
implementation of the functions remains in ld.lib.so and, thus, is
provided at runtime in any case. We also cleaned up many POSIX-level
depot archives from the base dependency already, which paves the way
less version updates in the future of only the base API changes.


Redirection of LOG output to TRACE events
=========================================

;@tomga (?)

commit 1d9a2dce94673b15f389a500e5f016d9e89ca774
Author: Tomasz Gajewski <tomga@wp.pl>
Date:   Wed Apr 1 01:50:26 2020 +0200

    trace: extend policy with log_output
    
    Issue #3714

commit db8ec81e9f54b696d3793e82e7e0cf5a2928fd91
Author: Tomasz Gajewski <tomga@wp.pl>
Date:   Wed Apr 1 01:51:54 2020 +0200

    trace: log_output policy that redirects logs to trace
    
    Issue #3714

commit 870d348d77c1afb01dfd2482fe623bef5f5ddbf1
Author: Tomasz Gajewski <tomga@wp.pl>
Date:   Tue Apr 7 23:47:31 2020 +0200

    trace: redirect logs to trace based on policy
    
    If trace is enabled for component than an attempt to put message into
    trace buffer is performed using log_output policy. If it succeeds than
    message is not put to logs using log service.
    
    Fixes #3714

commit 4639978b3ac062cdc1811bfd6237f3680921b220
Author: Tomasz Gajewski <tomga@wp.pl>
Date:   Wed Apr 1 00:39:24 2020 +0200

    trace_logger: avoid output of empty lines
    
    It avoids output of empty lines in output buffer if traced messages end
    with \n (what is common with messages logged from dde_linux).
    
    Issue #3714

commit fca2a05adf3272ef78ff473afec3181114d9b702
Author: Tomasz Gajewski <tomga@wp.pl>
Date:   Thu Apr 9 12:16:45 2020 +0200

    trace: extend test for log_output
    
    Issue #3714


MSI-X support on x86
====================

The platform driver now supports to scan for the MSI-X cap of PCI devices
and to parse and setup the MSI-X structure to make use of it. With this
change MSI-X style interrupts are usable by kernels supporting MSI already.

The feature was tested with NVMe devices so far. If MSI-X is available for
a PCI devices, the output looks like this:

! [init -> platform_drv] nvme_drv -> : assignment of PCI device 01:00.0 succeeded
! [init -> platform_drv] 01:00.0 adjust IRQ as reported by ACPI: 11 -> 16
! [init -> platform_drv] 01:00.0 uses MSI-X vector 0x7f, address 0xfee00018
! [init -> nvme_drv] NVMe PCIe controller found (0x1987:0x5007)

Optimized retrieval of TRACE subject information
================================================

The trace infrastructure of Genode supports to track and to collect information
about the available subjects (e.g. threads) in the system. Up to now the retrival
of information about all subjects of count n required to make n RPC call to
Genode's 'core' component, which imply n times the overhead for process
context switching. With this release the trace session got extended to
request the subject infos of all subjects at once, in order to reduce the
overhead. The new 'for_each_subject_info' method of the trace client side
makes use of the new optimization and is used by the top component.

Library updates
===============

We updated the OpenSSL patch level from 1.0.2q to the latest version
1.0.2u as an intermediate step to a future update to 1.1.1.


Platforms
#########

Execution on bare hardware (base-hw)
====================================

Consolidated virtual machine monitor for ARMv7 and ARMv8
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@skalk

commit 58db6542f87aecf44482cd354ebb673d73b5e924
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Fri Feb 21 11:35:43 2020 +0100

    hw: check for security extension support in GICv2
    
    Ref #3638

commit 74e75d7fbcda3dfb09d016d128f1567c141e83cd
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Wed Mar 25 19:09:36 2020 +0100

    hw: enable virtualization support for virt_qemu
    
    Ref #3638

commit 941e918b466f13622f13dba0290a3f5800461bd6
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Nov 14 10:52:20 2019 +0100

    vmm: unify armv7/v8 virtualization
    
    Fix #3638


Write-combined framebuffer on x86
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Motivated by a chewy GUI performance of Sculpt on [https://genode.org/documentation/release-notes/20.02#Execution_on_bare_hardware__base-hw_ - Genode/Spunky], the write-
combining support for base-hw got enabled. To achieve better throughput
to the framebuffer memory, we set up the x86 page attribute table (PAT)
with a configuration for write combining and added the corresponding
cacheability attributes to the page-table entries of those framebuffer memory
mappings. With the changes the GUI feeling became more snappy.

Improved cache maintenance on ARM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@skalk

commit 6d48b5484df270bef05be55edfcd2493dacd19ec
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Tue Mar 3 15:56:50 2020 +0100

    hw: correct the ARM cache maintainance operations
    
    This commit fixes the following issues regarding cache maintainance
    under ARM:
    
    * read out I-, and D-cache line size at runtime and use the correct one
    * remove 'update_data_region' call from unprivileged syscalls
    * rename 'update_instr_region' syscall to 'cache_coherent_region' to
      reflect what it doing, namely make I-, and D-cache coherent
    * restrict 'cache_coherent_region' syscall to one page at a time
    * lookup the region given in a 'cache_coherent_region' syscall in the
      page-table of the PD to prevent machine exceptions in the kernel
    * only clean D-cache lines, do not invalidate them when pages where
      added on Cortex-A8 and ARMv6 (MMU sees phys. memory here)
    * remove unused code relicts of cache maintainance
    
    In addition it introduces per architecture memory clearance functions
    used by core, when preparing new dataspaces. Thereby, it optimizes:
    
    * on ARMv7 using per-word assignments
    * on ARMv8 using cacheline zeroing
    * on x86_64 using 'rept stosq' assembler instruction
    
    Fix #3685

commit ff378a8c5bda3f6d7585ca25a446d726a0ad82c0
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Apr 6 20:44:29 2020 +0200

    hw: cache maintainance on mapping removal too
    
    Older ARM processors like ARMv6, or Cortex A8 need to write back changes
    of the page-tables to physical ram because the MMU does not use the cache.
    This naturally needs to be done not only when adding a mapping,
    but on removal too.
    
    Fix #3715


Qemu-virt platform support
~~~~~~~~~~~~~~~~~~~~~~~~~~

;@skalk

commit dad1de186507445360aa9fc94bdc91dddcd054f8
Author: Piotr Tworek <tworaz@tworaz.net>
Date:   Thu Nov 28 23:29:21 2019 +0100

    hw: Add interface for making basic ARM PSCI calls.
    
    So far this only exposes two functions allowing the code to turn on
    additional CPUs. There is much more functionality defined by PSCI spec
    but so far its not needed by Genode.
    
    Fixes #3672

commit 585c4b8c69f1a5fb73a9b730c748baf1203628f9
Author: Piotr Tworek <tworaz@tworaz.net>
Date:   Sun Sep 15 01:10:20 2019 +0200

    hw: Add support for Qemu virt arm platforms.
    
    This patch adds support for booting base-hw kernel on qemu-arm virt
    machines. The arm_virt machine has 2GB of RAM, 2 Cortex A15 cores and
    uses GICv2 interrupt controller. The arm_64_virt machine also has 2GB of
    RAM, but has 4 Cortex A53 cores and uses GICv3. Both machines use PSCI
    to boot additional CPU cores.
    
    Fixes #3673


NOVA microhypervisor
====================

The CPU affinity handling concept of Genode got added with
[https://genode.org/documentation/release-notes/13.08#Management_of_CPU_affinities - release 13.08].
With this release we added support to leverage the two dimensional vision of
the concept, by grouping [https://en.wikipedia.org/wiki/Hyper-threading - hyper-threads]
of one Core on the y-axis in the affinity space of Genode.

Genode's 'core' roottask for NOVA got adjusted to scan the NOVA kernels hypervisor
information page (HIP) for the hyper-thread support. If available, all CPUs
belonging to the same core get grouped now in Genode's affinity space along
the y-axis. An example output on a machine with hyper-thread support now looks
like this:

! Hypervisor reports 4x2 CPUs
! mapping: affinity space -> kernel cpu id - package:core:thread
!  remap (0x0) -> 0 - 0:0:0) boot cpu
!  remap (0x1) -> 1 - 0:0:1)
!  remap (1x0) -> 2 - 0:1:0)
!  remap (1x1) -> 3 - 0:1:1)
!  remap (2x0) -> 4 - 0:2:0)
!  remap (2x1) -> 5 - 0:2:1)
!  remap (3x0) -> 6 - 0:3:0)
!  remap (3x1) -> 7 - 0:3:1)

From the output one can determine Genode's affinity notation in form of (x,y)
mapped to the correspending CPU. The package:core:thread column represents the
report by the NOVA kernel about CPU characteristics collected by utilizing
[https://en.wikipedia.org/wiki/CPUID - CPUID] during system boot up.

To utilize all hyper-threads in an init configuration, the affinity-space can
now be configured with a height of 2 and the y-axis of a 'start' node with 0
to 1, e.g.

! <config>
!  <affinity-space width="4" height="2"/>
!  ...
!  <start name="app">
!   <affinity xpos="0" ypos="1"/>  <!-- CPU on Core 0, Hyper-thread 1 -->
!   ...
!
!  <start name="app"> <!-- CPU on Core 3, Hyper-thread 0 -->
!   <affinity xpos="3" ypos="0"/>
!   ...
!  </start>
!
!  <start name="app"> <!-- CPU on Core 3, Hyper-thread 1 -->
!     <affinity xpos="3" ypos="1"/>
!   ...
!  </start>
! </config>

Note: With this new feature the former sorting of hyper-threaded
CPUs for Genode/NOVA is removed, which got introduced with [https://genode.org/documentation/release-notes/16.11#NOVA_hypervisor - release 16.08].
Previously, given a number of n logical CPUs (with hyper-threading enabled),
all hyper-threads with id 0 were available in the
affinity-space (x,y) from (0,0) to (n/2-1,0) and all
hyper-threads with id 1 as (n/2,0) to (n-1,0).


Linux
=====

When executed on top of the Linux kernel, Genode's core component used to
assume a practically infinite amount of RAM as the basis for the RAM-quota
trading within the Genode system. The current release introduces the option to
manually supply a realistic value of the total RAM quota as environment
variable to Genode's core component. If the environment variable
GENODE_RAM_QUOTA is defined, its value is taken as the number of bytes
assigned to the init component started by core.

Thanks to Pirmin Duss for this welcome contribution.
